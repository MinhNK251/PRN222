@page "/products"
@using Service.DTO
@using Service.Interface
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search products..." 
                   @bind-value="searchTerm" @bind-value:event="oninput" @onkeyup="HandleSearch" />
            <button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch">
                <i class="bi bi-search"></i> Search
            </button>
        </div>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="selectedCategoryId">
            <option value="0">All Categories</option>
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            }
        </select>
        <button class="btn btn-outline-secondary mt-2" @onclick="FilterByCategory">Apply Filter</button>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="sortOption">
            <option value="name">Name (A-Z)</option>
            <option value="name_desc">Name (Z-A)</option>
            <option value="price">Price (Low to High)</option>
            <option value="price_desc">Price (High to Low)</option>
        </select>
        <button class="btn btn-outline-secondary mt-2" @onclick="SortProducts">Apply Sort</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @message
        <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
    </div>
}

@if (products == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var product in displayedProducts)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="card-title mb-0">@product.ProductName</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><strong>Category:</strong> @product.CategoryName</p>
                        <p class="card-text"><strong>Price:</strong> $@product.UnitPrice.ToString("F2")</p>
                        <p class="card-text"><strong>In Stock:</strong> @product.UnitsInStock</p>
                        
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="() => ViewProductDetails(product.ProductId)">
                            View Details
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!displayedProducts.Any())
    {
        <div class="alert alert-info mt-3">
            No products found matching your criteria.
        </div>
    }

    <div class="d-flex justify-content-center mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    private List<ProductDTO>? products;
    private List<CategoryDTO>? categories;
    private List<ProductDTO> filteredProducts = new List<ProductDTO>();
    private List<ProductDTO> displayedProducts = new List<ProductDTO>();
    
    private string searchTerm = string.Empty;
    private int selectedCategoryId = 0;
    private string sortOption = "name";
    private string message = string.Empty;
    
    private int currentPage = 1;
    private int pageSize = 6;
    private int totalPages => (int)Math.Ceiling(filteredProducts.Count / (double)pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            products = await ProductService.GetAllProductsAsync();
            categories = await CategoryService.GetAllCategoriesAsync();
            
            // Initialize filtered products with all products
            filteredProducts = products.ToList();
            
            // Apply initial sorting
            ApplySorting();
            
            // Update displayed products
            UpdateDisplayedProducts();
        }
        catch (Exception ex)
        {
            message = $"Error loading products: {ex.Message}";
        }
    }

    private void HandleSearch()
    {
        currentPage = 1;
        FilterProducts();
    }

    private void FilterByCategory()
    {
        currentPage = 1;
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (products == null) return;

        filteredProducts = products.Where(p => 
            (string.IsNullOrWhiteSpace(searchTerm) || 
             p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) 
             ) &&
            (selectedCategoryId == 0 || p.CategoryId == selectedCategoryId)
        ).ToList();

        ApplySorting();
        UpdateDisplayedProducts();
    }

    private void SortProducts()
    {
        ApplySorting();
        UpdateDisplayedProducts();
    }

    private void ApplySorting()
    {
        filteredProducts = sortOption switch
        {
            "name" => filteredProducts.OrderBy(p => p.ProductName).ToList(),
            "name_desc" => filteredProducts.OrderByDescending(p => p.ProductName).ToList(),
            "price" => filteredProducts.OrderBy(p => p.UnitPrice).ToList(),
            "price_desc" => filteredProducts.OrderByDescending(p => p.UnitPrice).ToList(),
            _ => filteredProducts.OrderBy(p => p.ProductName).ToList()
        };
    }

    private void UpdateDisplayedProducts()
    {
        displayedProducts = filteredProducts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdateDisplayedProducts();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdateDisplayedProducts();
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
        UpdateDisplayedProducts();
    }

    private void ViewProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/products/{productId}");
    }
}