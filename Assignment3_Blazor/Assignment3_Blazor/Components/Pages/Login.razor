@page "/login"
@using Service.DTO
@using Service.Interface
@using Assignment3_Blazor.Authentication
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">Login</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="form-group mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <div class="form-group mb-3">
                        <label>Login as:</label>
                        <div class="form-check">
                            <InputRadioGroup @bind-Value="loginType">
                                <div class="form-check">
                                    <InputRadio class="form-check-input" Value="@("Member")" id="member" />
                                    <label class="form-check-label" for="member">Member</label>
                                </div>
                                <div class="form-check">
                                    <InputRadio class="form-check-input" Value="@("Admin")" id="admin" />
                                    <label class="form-check-label" for="admin">Admin</label>
                                </div>
                            </InputRadioGroup>
                        </div>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Login</button>
                    </div>
                </EditForm>

                <div class="mt-3 text-center">
                    <p>Don't have an account? <a href="/register">Register here</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private MemberLoginDTO loginModel = new MemberLoginDTO();
    private string loginType = "Member";
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity!.IsAuthenticated)
        {
            if (authState.User.IsInRole("Admin"))
            {
                NavigationManager.NavigateTo("/admin/dashboard");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;

        if (loginType == "Admin")
        {
            var adminLoginModel = new LoginDTO
            {
                Email = loginModel.Email,
                Password = loginModel.Password
            };

            var isValidAdmin = await AuthService.ValidateAdminCredentials(adminLoginModel);

            if (isValidAdmin)
            {
                var userSession = new UserSession
                {
                    Email = loginModel.Email,
                    Role = "Admin"
                };

                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(userSession);

                NavigationManager.NavigateTo("/admin/dashboard", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid admin credentials";
            }
        }
        else
        {
            var isValidMember = await AuthService.ValidateMemberCredentials(loginModel);

            if (isValidMember)
            {
                var userSession = new UserSession
                {
                    Email = loginModel.Email,
                    Role = "Member"
                };

                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthStateProvider.UpdateAuthenticationState(userSession);

                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
    }
}