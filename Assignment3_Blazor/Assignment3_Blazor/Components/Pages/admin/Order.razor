@page "/admin/orders"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Service.DTO
@using Service.Interface
@using Assignment3_Blazor.Authentication
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IOrderService OrderService
@inject IMemberService MemberService
@inject IProductService ProductService
@inject IJSRuntime JSRuntime

<PageTitle>Order Management</PageTitle>

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
        <h1>Order Management</h1>

        <div class="alert alert-success">
            Welcome, @auth.User.Identity?.Name!
        </div>

        <div class="mb-3">
            <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/admin/dashboard")'>
                <i class="bi bi-speedometer2"></i> Dashboard
            </button>
            <button class="btn btn-primary ms-2" @onclick="Logout">
                <i class="bi bi-box-arrow-right"></i> Logout
            </button>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                @message
                <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
            </div>
        }

        @if (orders == null)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Orders</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Order ID</th>
                                    <th>Member</th>
                                    <th>Order Date</th>
                                    <th>Required Date</th>
                                    <th>Shipped Date</th>
                                    <th>Total Amount</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var order in orders)
                                {
                                    <tr>
                                        <td>@order.OrderId</td>
                                        <td>@order.MemberCompanyName</td>
                                        <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                                        <td>@(order.RequiredDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                                        <td>@(order.ShippedDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                                        <td>@order.TotalAmount.ToString("C")</td>
                                        <td>
                                            <button class="btn btn-sm btn-info" @onclick="() => ViewOrderDetails(order.OrderId)">
                                                <i class="bi bi-eye"></i> View
                                            </button>
                                            <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteOrder(order.OrderId)">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            @if (selectedOrder != null)
            {
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Order #@selectedOrder.OrderId Details</h5>
                        <button class="btn btn-sm btn-secondary" @onclick="() => selectedOrder = null">
                            <i class="bi bi-x-lg"></i> Close
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Order Information</h6>
                                <table class="table table-sm">
                                    <tr>
                                        <th>Order ID:</th>
                                        <td>@selectedOrder.OrderId</td>
                                    </tr>
                                    <tr>
                                        <th>Member:</th>
                                        <td>@selectedOrder.MemberCompanyName (@selectedOrder.MemberEmail)</td>
                                    </tr>
                                    <tr>
                                        <th>Order Date:</th>
                                        <td>@selectedOrder.OrderDate.ToString("yyyy-MM-dd")</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6>Shipping Information</h6>
                                <EditForm Model="@selectedOrder" OnValidSubmit="UpdateOrderShipping">
                                    <div class="mb-2">
                                        <label>Required Date:</label>
                                        <InputDate class="form-control" @bind-Value="selectedOrder.RequiredDate" />
                                    </div>
                                    <div class="mb-2">
                                        <label>Shipped Date:</label>
                                        <InputDate class="form-control" @bind-Value="selectedOrder.ShippedDate" />
                                    </div>
                                    <div class="mb-2">
                                        <label>Freight:</label>
                                        <InputNumber class="form-control" @bind-Value="selectedOrder.Freight" />
                                    </div>
                                    <button type="submit" class="btn btn-primary">Update Shipping</button>
                                </EditForm>
                            </div>
                        </div>

                        <h6>Order Items</h6>
                        <div class="mb-2">
                            <button class="btn btn-success" @onclick="() => ShowAddItemForm()">
                                <i class="bi bi-plus-circle"></i> Add Item
                            </button>
                        </div>

                        @if (showAddItemForm)
                        {
                            <div class="card mb-3">
                                <div class="card-header">
                                    <h6>Add New Item</h6>
                                </div>
                                <div class="card-body">
                                    <EditForm Model="@newOrderDetail" OnValidSubmit="AddOrderDetail">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />

                                        <div class="row">
                                            <div class="col-md-4 mb-2">
                                                <label>Product:</label>
                                                <select class="form-select" @bind="newOrderDetail.ProductId">
                                                    <option value="0">-- Select Product --</option>
                                                    @foreach (var product in availableProducts)
                                                    {
                                                        <option value="@product.ProductId">@product.ProductName</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-2 mb-2">
                                                <label>Unit Price:</label>
                                                <InputNumber class="form-control" @bind-Value="newOrderDetail.UnitPrice" />
                                            </div>
                                            <div class="col-md-2 mb-2">
                                                <label>Quantity:</label>
                                                <InputNumber class="form-control" @bind-Value="newOrderDetail.Quantity" />
                                            </div>
                                            <div class="col-md-2 mb-2">
                                                <label>Discount (%):</label>
                                                <InputNumber class="form-control" @bind-Value="discountPercentage" />
                                            </div>
                                            <div class="col-md-2 d-flex align-items-end">
                                                <button type="submit" class="btn btn-primary me-2">Add</button>
                                                <button type="button" class="btn btn-secondary" @onclick="CancelAddItem">Cancel</button>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        }

                        @if (showEditItemForm)
                        {
                            <div class="card mb-3">
                                <div class="card-header">
                                    <h6>Edit Item</h6>
                                </div>
                                <div class="card-body">
                                    <EditForm Model="@editingOrderDetail" OnValidSubmit="UpdateOrderDetail">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />

                                        <div class="row">
                                            <div class="col-md-4 mb-2">
                                                <label>Product:</label>
                                                <input type="text" class="form-control" value="@editingOrderDetail.ProductName" readonly />
                                            </div>
                                            <div class="col-md-2 mb-2">
                                                <label>Unit Price:</label>
                                                <InputNumber class="form-control" @bind-Value="editingOrderDetail.UnitPrice" />
                                            </div>
                                            <div class="col-md-2 mb-2">
                                                <label>Quantity:</label>
                                                <InputNumber class="form-control" @bind-Value="editingOrderDetail.Quantity" />
                                            </div>
                                            <div class="col-md-2 mb-2">
                                                <label>Discount (%):</label>
                                                <InputNumber class="form-control" @bind-Value="editDiscountPercentage" />
                                            </div>
                                            <div class="col-md-2 d-flex align-items-end">
                                                <button type="submit" class="btn btn-primary me-2">Update</button>
                                                <button type="button" class="btn btn-secondary" @onclick="CancelEditItem">Cancel</button>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        }

                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Unit Price</th>
                                        <th>Quantity</th>
                                        <th>Discount</th>
                                        <th>Total</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in selectedOrder.OrderDetails)
                                    {
                                        <tr>
                                            <td>@item.ProductName</td>
                                            <td>@item.UnitPrice.ToString("C")</td>
                                            <td>@item.Quantity</td>
                                            <td>@(item.Discount * 100)%</td>
                                            <td>@((item.UnitPrice * item.Quantity * (1 - (decimal)item.Discount)).ToString("C"))</td>
                                            <td>
                                                <button class="btn btn-sm btn-warning" @onclick="() => EditOrderDetail(item)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteOrderDetail(item.OrderId, item.ProductId)">
                                                    <i class="bi bi-trash"></i> Remove
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th colspan="4" class="text-end">Subtotal:</th>
                                        <th>@selectedOrder.TotalAmount.ToString("C")</th>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <th colspan="4" class="text-end">Freight:</th>
                                        <th>@(selectedOrder.Freight?.ToString("C") ?? "$0.00")</th>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <th colspan="4" class="text-end">Total:</th>
                                        <th>@((selectedOrder.TotalAmount + (selectedOrder.Freight ?? 0)).ToString("C"))</th>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<OrderDTO>? orders;
    private OrderDTO? selectedOrder;
    private List<ProductDTO> availableProducts = new List<ProductDTO>();
    private OrderDetailDTO newOrderDetail = new OrderDetailDTO();
    private OrderDetailDTO editingOrderDetail = new OrderDetailDTO();
    private float discountPercentage = 0;
    private float editDiscountPercentage = 0;
    private bool showAddItemForm = false;
    private bool showEditItemForm = false;
    private string message = string.Empty;
    private bool isError = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        if (!authState.User.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (!authState.User.IsInRole("Admin"))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await LoadOrders();
        }
    }

    private async Task LoadOrders()
    {
        try
        {
            orders = await OrderService.GetAllOrdersAsync();
        }
        catch (Exception ex)
        {
            message = $"Error loading orders: {ex.Message}";
            isError = true;
        }
    }

    private async Task ViewOrderDetails(int orderId)
    {
        try
        {
            selectedOrder = await OrderService.GetOrderByIdAsync(orderId);
            showAddItemForm = false;
            showEditItemForm = false;
            
            // Load available products for adding new items
            availableProducts = await ProductService.GetAllProductsAsync();
            
            // Filter out products already in the order
            availableProducts = availableProducts
                .Where(p => !selectedOrder.OrderDetails.Any(od => od.ProductId == p.ProductId))
                .ToList();
        }
        catch (Exception ex)
        {
            message = $"Error loading order details: {ex.Message}";
            isError = true;
        }
    }

    private async Task UpdateOrderShipping()
    {
        try
        {
            if (selectedOrder == null)
                return;

            await OrderService.UpdateOrderAsync(selectedOrder);
            message = "Order shipping information updated successfully";
            isError = false;
        }
        catch (Exception ex)
        {
            message = $"Error updating order: {ex.Message}";
            isError = true;
        }
    }

    private async Task DeleteOrder(int orderId)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this order? This action cannot be undone."))
                return;

            await OrderService.DeleteOrderAsync(orderId);
            message = "Order deleted successfully";
            isError = false;
            
            if (selectedOrder?.OrderId == orderId)
                selectedOrder = null;
                
            await LoadOrders();
        }
        catch (Exception ex)
        {
            message = $"Error deleting order: {ex.Message}";
            isError = true;
        }
    }

    private void ShowAddItemForm()
    {
        newOrderDetail = new OrderDetailDTO
        {
            OrderId = selectedOrder!.OrderId,
            UnitPrice = 0,
            Quantity = 1,
            Discount = 0
        };
        discountPercentage = 0;
        showAddItemForm = true;
        showEditItemForm = false;
    }

    private void CancelAddItem()
    {
        showAddItemForm = false;
    }

    private async Task AddOrderDetail()
    {
        try
        {
            if (newOrderDetail.ProductId == 0)
            {
                message = "Please select a product";
                isError = true;
                return;
            }

            newOrderDetail.Discount = discountPercentage / 100f;
            await OrderService.AddOrderDetailAsync(newOrderDetail);
            message = "Item added successfully";
            isError = false;
            showAddItemForm = false;
            
            // Refresh order details
            await ViewOrderDetails(selectedOrder!.OrderId);
        }
        catch (Exception ex)
        {
            message = $"Error adding item: {ex.Message}";
            isError = true;
        }
    }

    private void EditOrderDetail(OrderDetailDTO orderDetail)
    {
        editingOrderDetail = new OrderDetailDTO
        {
            OrderId = orderDetail.OrderId,
            ProductId = orderDetail.ProductId,
            ProductName = orderDetail.ProductName,
            UnitPrice = orderDetail.UnitPrice,
            Quantity = orderDetail.Quantity,
            Discount = orderDetail.Discount
        };
        editDiscountPercentage = orderDetail.Discount * 100;
        showEditItemForm = true;
        showAddItemForm = false;
    }

    private void CancelEditItem()
    {
        showEditItemForm = false;
    }

    private async Task UpdateOrderDetail()
    {
        try
        {
            editingOrderDetail.Discount = editDiscountPercentage / 100f;
            await OrderService.UpdateOrderDetailAsync(editingOrderDetail);
            message = "Item updated successfully";
            isError = false;
            showEditItemForm = false;
            
            // Refresh order details
            await ViewOrderDetails(selectedOrder!.OrderId);
        }
        catch (Exception ex)
        {
            message = $"Error updating item: {ex.Message}";
            isError = true;
        }
    }

    private async Task DeleteOrderDetail(int orderId, int productId)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this item?"))
                return;

            await OrderService.DeleteOrderDetailAsync(orderId, productId);
            message = "Item removed successfully";
            isError = false;
            
            // Refresh order details
            await ViewOrderDetails(orderId);
        }
        catch (Exception ex)
        {
            message = $"Error removing item: {ex.Message}";
            isError = true;
        }
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/");
    }
}