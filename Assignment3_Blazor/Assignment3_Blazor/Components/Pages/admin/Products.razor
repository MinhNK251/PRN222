@page "/admin/products"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Service.DTO
@using Service.Interface
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime

<PageTitle>Product Management</PageTitle>

<AuthorizeView Roles="Admin" Context="auth">
    <Authorized>
        <h1>Product Management</h1>

        <div class="alert alert-success">
            Welcome, @auth.User.Identity?.Name!
        </div>

        <div class="mb-3">
            <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/admin/members")'>
                <i class="bi bi-people"></i> Manage Members
            </button>
            <button class="btn btn-primary ms-2" @onclick="Logout">
                <i class="bi bi-box-arrow-right"></i> Logout
            </button>
        </div>


        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                @message
                <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
            </div>
        }

        @if (showAddEditForm)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5>@(editingProduct.ProductId == 0 ? "Add New Product" : "Edit Product")</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@editingProduct" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="productName">Product Name</label>
                            <InputText id="productName" @bind-Value="editingProduct.ProductName" class="form-control" />
                            <ValidationMessage For="@(() => editingProduct.ProductName)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="categoryId">Category</label>
                            <InputSelect id="categoryId" @bind-Value="editingProduct.CategoryId" class="form-control">
                                <option value="0">-- Select Category --</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.CategoryId">@category.CategoryName</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editingProduct.CategoryId)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="weight">Weight</label>
                            <InputText id="weight" @bind-Value="editingProduct.Weight" class="form-control" />
                            <ValidationMessage For="@(() => editingProduct.Weight)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="unitPrice">Unit Price</label>
                            <InputNumber id="unitPrice" @bind-Value="editingProduct.UnitPrice" class="form-control" />
                            <ValidationMessage For="@(() => editingProduct.UnitPrice)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="unitsInStock">Units In Stock</label>
                            <InputNumber id="unitsInStock" @bind-Value="editingProduct.UnitsInStock" class="form-control" />
                            <ValidationMessage For="@(() => editingProduct.UnitsInStock)" />
                        </div>

                        <div class="mt-3">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Products List</h5>
                    <button class="btn btn-primary btn-sm" @onclick="AddNewProduct">Add New Product</button>
                </div>
                <div class="card-body">
                    @if (products == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else if (!products.Any())
                    {
                        <p>No products found.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Product Name</th>
                                        <th>Category</th>
                                        <th>Weight</th>
                                        <th>Unit Price</th>
                                        <th>Units In Stock</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var product in products)
                                    {
                                        <tr>
                                            <td>@product.ProductId</td>
                                            <td>@product.ProductName</td>
                                            <td>@product.CategoryName</td>
                                            <td>@product.Weight</td>
                                            <td>@product.UnitPrice.ToString("C")</td>
                                            <td>@product.UnitsInStock</td>
                                            <td>
                                                <button class="btn btn-sm btn-info me-1" @onclick="() => EditProduct(product.ProductId)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.ProductId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            You are not authorized to view this page. Please <a href="/login">login</a> as an admin.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    private List<ProductDTO>? products;
    private List<CategoryDTO>? categories;
    private ProductDTO editingProduct = new();
    private bool showAddEditForm = false;
    private string message = string.Empty;
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;

        if (!authState.User.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        else if (!authState.User.IsInRole("Admin"))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        try
        {
            products = await ProductService.GetAllProductsAsync();
            categories = await CategoryService.GetAllCategoriesAsync();
        }
        catch (Exception ex)
        {
            message = $"Error loading data: {ex.Message}";
            isError = true;
        }
    }

    private void AddNewProduct()
    {
        editingProduct = new ProductDTO();
        showAddEditForm = true;
        message = string.Empty;
    }

    private async Task EditProduct(int id)
    {
        try
        {
            editingProduct = await ProductService.GetProductByIdAsync(id);
            showAddEditForm = true;
            message = string.Empty;
        }
        catch (Exception ex)
        {
            message = $"Error loading product: {ex.Message}";
            isError = true;
        }
    }

    private async Task DeleteProduct(int id)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?"))
                return;

            await ProductService.DeleteProductAsync(id);
            await LoadData();
            message = "Product deleted successfully";
            isError = false;
        }
        catch (Exception ex)
        {
            message = $"Error deleting product: {ex.Message}";
            isError = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editingProduct.ProductId == 0)
            {
                await ProductService.CreateProductAsync(editingProduct);
                message = "Product added successfully";
            }
            else
            {
                await ProductService.UpdateProductAsync(editingProduct);
                message = "Product updated successfully";
            }

            isError = false;
            showAddEditForm = false;
            await LoadData();
        }
        catch (Exception ex)
        {
            message = $"Error saving product: {ex.Message}";
            isError = true;
        }
    }

    private void CancelEdit()
    {
        showAddEditForm = false;
        message = string.Empty;
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        NavigationManager.NavigateTo("/");
    }
}